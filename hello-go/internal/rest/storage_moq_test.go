// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rest

import (
	"context"
	"github.com/fvosberg/kickstart/hello-go/internal"
	"sync"
)

var (
	lockstorageMockGreetings    sync.RWMutex
	lockstorageMockSaveGreeting sync.RWMutex
)

// Ensure, that storageMock does implement storage.
// If this is not the case, regenerate this file with moq.
var _ storage = &storageMock{}

// storageMock is a mock implementation of storage.
//
//     func TestSomethingThatUsesstorage(t *testing.T) {
//
//         // make and configure a mocked storage
//         mockedstorage := &storageMock{
//             GreetingsFunc: func(ctx context.Context) ([]internal.Greeting, error) {
// 	               panic("mock out the Greetings method")
//             },
//             SaveGreetingFunc: func(ctx context.Context, g *internal.Greeting) error {
// 	               panic("mock out the SaveGreeting method")
//             },
//         }
//
//         // use mockedstorage in code that requires storage
//         // and then make assertions.
//
//     }
type storageMock struct {
	// GreetingsFunc mocks the Greetings method.
	GreetingsFunc func(ctx context.Context) ([]internal.Greeting, error)

	// SaveGreetingFunc mocks the SaveGreeting method.
	SaveGreetingFunc func(ctx context.Context, g *internal.Greeting) error

	// calls tracks calls to the methods.
	calls struct {
		// Greetings holds details about calls to the Greetings method.
		Greetings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SaveGreeting holds details about calls to the SaveGreeting method.
		SaveGreeting []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// G is the g argument value.
			G *internal.Greeting
		}
	}
}

// Greetings calls GreetingsFunc.
func (mock *storageMock) Greetings(ctx context.Context) ([]internal.Greeting, error) {
	if mock.GreetingsFunc == nil {
		panic("storageMock.GreetingsFunc: method is nil but storage.Greetings was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockstorageMockGreetings.Lock()
	mock.calls.Greetings = append(mock.calls.Greetings, callInfo)
	lockstorageMockGreetings.Unlock()
	return mock.GreetingsFunc(ctx)
}

// GreetingsCalls gets all the calls that were made to Greetings.
// Check the length with:
//     len(mockedstorage.GreetingsCalls())
func (mock *storageMock) GreetingsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockstorageMockGreetings.RLock()
	calls = mock.calls.Greetings
	lockstorageMockGreetings.RUnlock()
	return calls
}

// SaveGreeting calls SaveGreetingFunc.
func (mock *storageMock) SaveGreeting(ctx context.Context, g *internal.Greeting) error {
	if mock.SaveGreetingFunc == nil {
		panic("storageMock.SaveGreetingFunc: method is nil but storage.SaveGreeting was just called")
	}
	callInfo := struct {
		Ctx context.Context
		G   *internal.Greeting
	}{
		Ctx: ctx,
		G:   g,
	}
	lockstorageMockSaveGreeting.Lock()
	mock.calls.SaveGreeting = append(mock.calls.SaveGreeting, callInfo)
	lockstorageMockSaveGreeting.Unlock()
	return mock.SaveGreetingFunc(ctx, g)
}

// SaveGreetingCalls gets all the calls that were made to SaveGreeting.
// Check the length with:
//     len(mockedstorage.SaveGreetingCalls())
func (mock *storageMock) SaveGreetingCalls() []struct {
	Ctx context.Context
	G   *internal.Greeting
} {
	var calls []struct {
		Ctx context.Context
		G   *internal.Greeting
	}
	lockstorageMockSaveGreeting.RLock()
	calls = mock.calls.SaveGreeting
	lockstorageMockSaveGreeting.RUnlock()
	return calls
}
