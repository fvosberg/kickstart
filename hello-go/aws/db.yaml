AWSTemplateFormatVersion: 2010-09-09
Description: Creates the needed custom resource providers

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  SubnetIds:
    Type: String
    MinLength: 1
  VPCId:
    Type: String
    MinLength: 1
  SecretsProviderServiceToken:
    Type: String

Resources:
  MasterDB:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - SecurityGroup
      - MasterDBSubnetGroup
      - SuperUserPassword
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro # free tier eligible
      DBInstanceIdentifier: !Sub "${EnvironmentName}-master-db"
      Engine: postgres
      EngineVersion: 12.3
      DBName: root
      MasterUsername: root
      MasterUserPassword: !GetAtt SuperUserPassword.Secret
      DBSubnetGroupName: !Ref MasterDBSubnetGroup
      PubliclyAccessible: true # Protected by security group - for public access add your IP to the sg in an inbound rule
      VPCSecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      DBParameterGroupName: !Ref MasterDBParameterGroup
    DeletionPolicy: Snapshot

  MasterDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Parameters for PostgreSQL
      Family: postgres12
      Parameters: {}

  MasterDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet Group for VPC"
      SubnetIds: !Split [',', !Ref SubnetIds]

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for the database
      VpcId: !Ref VPCId

  SuperUserPassword:
    Type: Custom::Secret
    Properties:
      Name: !Sub '/${EnvironmentName}/postgres/root/PGPASSWORD'
      Alphabet: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
      ReturnSecret: true
      ServiceToken: !Ref SecretsProviderServiceToken


Outputs:
  MasterDBEndpoint:
    Description: This endpoint is not reachable from outside the private subnet. If you want to connect to it, you have to add an ingress rule with your IP to the SecurityGroup.
    Value: !Join [':', [!GetAtt MasterDB.Endpoint.Address, !GetAtt MasterDB.Endpoint.Port]]
  EndpointAddress:
    Value: !GetAtt MasterDB.Endpoint.Address
  EndpointPort:
    Value: !GetAtt MasterDB.Endpoint.Port
  SecurityGroupId:
    Value: !GetAtt SecurityGroup.GroupId
