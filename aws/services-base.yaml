AWSTemplateFormatVersion: 2010-09-09
Description: Creates the resources all fargate services will need

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  VPCId:
    Type: String
    Default: ""
  SubnetIds:
    Type: String
    Default: ""
  DatabaseSecurityGroupId:
    Type: String
  SSLCertificateArn:
    Type: String

Conditions:
  SSL: !Not [!Equals [ !Ref SSLCertificateArn, '' ]]
  NotSSL: !Not [ Condition: SSL ]
  HasSubnets: !Not [ !Equals [ !Ref SubnetIds, "" ] ]
  HasVPC: !Not [ !Equals [ !Ref VPCId, "" ] ]
  NotHasVPC: !Not [ Condition: HasVPC ]

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref EnvironmentName, cluster]]

  ServiceTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "Role used in the ${EnvironmentName} stack for accessing AWS service from EC2"
      RoleName: !Sub "${EnvironmentName}-service-task-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "Role used in the ${EnvironmentName} stack for container execution"
      RoleName: !Sub "${EnvironmentName}-execution-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ContainerSecurityGroup
    Properties:
      Name: !Sub ${EnvironmentName}-service-lb
      Subnets: !If [ HasSubnets, !Split [',', !Ref SubnetIds], !Ref "AWS::NoValue" ]
      SecurityGroups:
        - !Ref ContainerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-service-lb

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        # Do we need this? In case of no SSL? TODO
        #- Type: forward
        #  TargetGroupArn: !Ref DefaultTargetGroup
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"


  SecureLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: SSL
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
            #
  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-default
      VpcId: !If [ HasVPC, !Ref VPCId, !Ref "AWS::NoValue" ]
      Port: 80
      Protocol: HTTP


  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: SG for the ALB to access the services
        VpcId: !If [ HasVPC, !Ref VPCId, !Ref "AWS::NoValue" ]
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # TODO SecurityGroupEgress:
          #- IpProtocol: -1
            #CidrIp: 0.0.0.0/0

  ServiceDatabaseAccessSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - ContainerSecurityGroup
    Properties:
      GroupId: !Ref DatabaseSecurityGroupId
      IpProtocol: tcp
      FromPort: '5432'
      ToPort: '5432'
      SourceSecurityGroupId: !GetAtt ContainerSecurityGroup.GroupId

  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Condition: HasVPC
    Properties:
        Name: !Sub "svc.${EnvironmentName}.internal"
        Vpc: !If [ HasVPC, !Ref VPCId, !Ref "AWS::NoValue" ]

  PublicNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Condition: NotHasVPC
    Properties:
        Name: !Sub "svc.${EnvironmentName}.internal"

  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: !Sub "Discovery Service for the ${EnvironmentName} stack"
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Sub "${EnvironmentName}-discovery-service"
      NamespaceId: !If [ HasVPC, !Ref PrivateNamespace, !Ref PublicNamespace ]


Outputs:
  ServiceTaskRole:
    Value: !Ref ServiceTaskRole
  ExecutionRole:
    Value: !Ref ExecutionRole
  Cluster:
    Value: !Ref Cluster
  ContainerSecurityGroup:
    Value: !Ref ContainerSecurityGroup
  LoadBalancer:
    Value: !Ref LoadBalancer
  LoadBalancerUrl:
    Value: !Join [ "", ["http://", !GetAtt LoadBalancer.DNSName]]
  LoadBalancerListener:
    Value: !Ref LoadBalancerListener
  SecureLoadBalancerListener:
    Value: !Ref SecureLoadBalancerListener
  DiscoveryServiceArn:
    Value: !GetAtt DiscoveryService.Arn
  # TODO rename to namespace
  PrivateNamespace:
    Value: !If [ HasVPC, !Ref PrivateNamespace, !Ref PublicNamespace ]
